{
	"info": {
		"_postman_id": "33351ce0-cdb2-4fcf-bb38-ade8639b6889",
		"name": "Sportsbook_1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Normal Flow",
			"item": [
				{
					"name": "Scenario 1 Multi bets wins",
					"item": [
						{
							"name": "SC1-Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"   \r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC1-Batch Bets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = String(balance.toString().split(\".\")[1]).length;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
											"    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
											"    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
											"\r",
											"    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
											"\r",
											"    var currentBalance = parseFloat(jsonData.data.balance);\r",
											"    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
											"    \r",
											"    // if(currentBalance != sourceBalance){\r",
											"    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    // }\r",
											"\r",
											"    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
											"    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
											"    if(currentBalance == calcBalance){\r",
											"        calcBalance = currentBalance;\r",
											"    }\r",
											"\r",
											"    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", currentBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"\r",
											"    if(d > maxDigits){\r",
											"        pm.environment.set(d);\r",
											"        maxDigits = d;\r",
											"    }\r",
											"\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC1-Record Bet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct11111\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"    console.log(\"number_amount =>\" + number_amount);\r",
											"    console.log(\"sum =>\" + sum);\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct2222\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC1-Wins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
											"pm.environment.set(\"bets_1_win\", bets_1_win);",
											"",
											"var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
											"pm.environment.set(\"bets_2_win\", bets_2_win);",
											"",
											"var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
											"pm.environment.set(\"bets_3_win\", bets_3_win);",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"    });\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.success[0].balance;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var res_currency = jsonData.data.success[0].currency;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC1-Wins Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = (after - before).toFixed(4);\r",
											"//    verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bet\", function () {\r",
											"    pm.expect(action).to.eql(\"wins\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bets_1_win = parseFloat(pm.environment.get(\"bets_1_win\"));\r",
											"        var bets_2_win = parseFloat(pm.environment.get(\"bets_2_win\"));\r",
											"        var bets_3_win = parseFloat(pm.environment.get(\"bets_3_win\"));\r",
											"        var sum = bets_1_win + bets_2_win + bets_3_win;\r",
											"   pm.expect(number_amount).to.eql(sum);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{wins_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario 2 Multi bets refunds(all)",
					"item": [
						{
							"name": "SC2-Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC2-Batch Bets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = currentBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != sourceBalance){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", correctBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"     pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC2-Record Bet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC2-Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 1000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"   var balance = jsonData.data.balance;\r",
											"   var status_code = jsonData.status.code;\r",
											"   var res_currency = jsonData.data.currency;\r",
											"   var d = (balance.toString().split(\".\")[1].length);\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance is correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"    var bets_3 = postman.getEnvironmentVariable(\"bets_3\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = sourceBalance + bets_1 + bets_2 + bets_3;\r",
											"\r",
											"    if(currentBalance != correctBalance+1){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(\"The status_code must be \" + correctBalance)    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC2-Refund Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = (after - before).toFixed(4);\r",
											"//    verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bet\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bets_1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bets_2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bets_3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bets_1 + bets_2 + bets_3;\r",
											"   pm.expect(number_amount).to.eql(sum);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Bets完之後全部Refund"
				},
				{
					"name": "Scenario 3 Multi bets refunds(2/3) cancels(3)",
					"item": [
						{
							"name": "SC3-Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Batch Bets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = currentBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != sourceBalance){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", correctBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"     pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Record Bet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 1000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"   var balance = jsonData.data.balance;\r",
											"   var status_code = jsonData.status.code;\r",
											"   var res_currency = jsonData.data.currency;\r",
											"   var d = (balance.toString().split(\".\")[1].length);\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var datetime = jsonData.status.datetime;\r",
											"};\r",
											"\r",
											"pm.test(\"The balance is correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"    var bets_3 = postman.getEnvironmentVariable(\"bets_3\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = sourceBalance + bets_1 + bets_2 + bets_3;\r",
											"\r",
											"    if(currentBalance != correctBalance+1){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(\"The status_code must be \" + correctBalance)    \r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Refund Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = (before - after).toFixed(4);\r",
											"//    verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bet\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bets_1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var sum = bets_1;\r",
											"   pm.expect(number_amount).to.eql(bets_1);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Cancel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 1000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"var balance = jsonData.data.balance;\r",
											"   var status_code = jsonData.status.code;\r",
											"   var res_currency = jsonData.data.currency;\r",
											"   var d = (balance.toString().split(\".\")[1].length);\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/cancel",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"cancel"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC3-Cancel Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bet\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\"));\r",
											"        var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\"));\r",
											"\r",
											"        var sum = bets_1 + bets_3;\r",
											"   pm.expect(number_amount).to.eql(sum);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Bets(1/2/3) -> Refunds(2/3) -> Cancels(3)"
				},
				{
					"name": "Scenario 4 Multi bets amends",
					"item": [
						{
							"name": "SC4-Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Batch Bets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
											"    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
											"    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
											"\r",
											"    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
											"\r",
											"    var currentBalance = parseFloat(jsonData.data.balance);\r",
											"    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
											"    \r",
											"    // if(currentBalance != sourceBalance){\r",
											"    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    // }\r",
											"\r",
											"    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
											"    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
											"    if(currentBalance == calcBalance){\r",
											"        calcBalance = currentBalance;\r",
											"    }\r",
											"\r",
											"    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", currentBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Record Bet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Wins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
											"pm.environment.set(\"bets_1_win\", bets_1_win);",
											"",
											"var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
											"pm.environment.set(\"bets_2_win\", bets_2_win);",
											"",
											"var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
											"pm.environment.set(\"bets_3_win\", bets_3_win);",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"    });\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.success[0].balance;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var res_currency = jsonData.data.success[0].currency;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Wins Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = (after - before).toFixed(4);\r",
											"//    verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bet\", function () {\r",
											"    pm.expect(action).to.eql(\"wins\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bets_1_win = parseFloat(pm.environment.get(\"bets_1_win\"));\r",
											"        var bets_2_win = parseFloat(pm.environment.get(\"bets_2_win\"));\r",
											"        var bets_3_win = parseFloat(pm.environment.get(\"bets_3_win\"));\r",
											"        var sum = bets_1_win + bets_2_win + bets_3_win;\r",
											"   pm.expect(number_amount).to.eql(sum);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{wins_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Amends Credit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round1 +\":cq9\")",
											"postman.setEnvironmentVariable(\"amend_mtcode4\", \"rel-amend-BPUP2019\"+ bets_round2 + \":cq9\")",
											"",
											"console.log(\"round1 => \" + bets_round1);",
											"console.log(\"round2 => \" + bets_round2);",
											"console.log(\"round3 => \" + bets_round3);",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var status_code = jsonData.status.code;\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"var balance = jsonData.data.success[0].balance;\r",
											"var d = (balance.toString().split(\".\")[1].length);\r",
											"var res_currency = jsonData.data.success[0].currency;\r",
											"var currency = pm.variables.get(\"currency\");\r",
											"console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Amends Debit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round3 +\":cq9\");",
											"",
											"console.log(\"bets_round3 => \" + bets_round3);",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var status_code = jsonData.status.code;\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"var balance = jsonData.data.success[0].balance;\r",
											"var d = (balance.toString().split(\".\")[1].length);\r",
											"var res_currency = jsonData.data.success[0].currency;\r",
											"var currency = pm.variables.get(\"currency\");\r",
											"console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"dedit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"dedit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "SC4-Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unit Test",
			"item": [
				{
					"name": "Bets",
					"item": [
						{
							"name": "Batch Bets - The correct request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = currentBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != sourceBalance){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", correctBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"     pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - mtcode duplicate error, should return error code 2009",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"2009\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “account” parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “gamehall” parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “gamehall” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “gamecode” parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “gamecode” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “mtcode” parameter in data, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “mtcode” parameter in data, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “amount” parameter in data, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" No “amount” parameter in data, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “roundid” parameter in data, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “roundid” parameter in data, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n     \r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - No “eventtime” parameter in data, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “eventtime” parameter in data, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The eventime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1004\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}1\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"2020-08-06T04:30:00\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}2\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"2020-08-06T04:30:00\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - The createTime parameter has wrong time foramat in data, should return error code 1004",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Batch Bets -The createTime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1004\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}1\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}1\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"2020-08-06T04:30:00\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - The “amount” parameter is negative, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//將bets_1改為負值, 測試後再還原",
											"postman.setEnvironmentVariable(\"bets_1\", -10.22);",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//還原正常的bets_1\r",
											"postman.setEnvironmentVariable(\"bets_1\", 10.22);\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - Insufficient Balance, should return error code 1005",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"var mtcodeRandom2=guid2();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode\",\"rel-bet-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round\",mtcodeRandom)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" Insufficient Balance, should return error code 1005\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1005\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 999999999999,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 999999999999,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Bets - If the player not found, should return error code 1006",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"If the player not found, should return error code 1006\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1006\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"fakeplayer\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record - Batch Bets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wins",
					"item": [
						{
							"name": "Wins - Balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - Batch Bets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = currentBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != sourceBalance){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", correctBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"     pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - Wins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
											"pm.environment.set(\"bets_1_win\", bets_1_win);",
											"",
											"var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
											"pm.environment.set(\"bets_2_win\", bets_2_win);",
											"",
											"var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
											"pm.environment.set(\"bets_3_win\", bets_3_win);",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"    });\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.success[0].balance;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var res_currency = jsonData.data.success[0].currency;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - Record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"if (pm.response.code == \"200\")\r",
											"{\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"   var balance = jsonData.data.balance;\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"   var action = jsonData.data.action;\r",
											"   var status_status = jsonData.data.status.status;\r",
											"   var status_message = jsonData.data.status.message;\r",
											"   var data_currency = jsonData.data.currency;\r",
											"   var before = jsonData.data.before;\r",
											"   var after = jsonData.data.balance;\r",
											"   var verify_amount = before - after;\r",
											"   verify_amount = verify_amount.toFixed(4);\r",
											"   var number_amount = Number(verify_amount);\r",
											"   var res_amount = jsonData.data.event[0].amount;\r",
											"};\r",
											"\r",
											"pm.test(\"action must be bets\", function () {\r",
											"    pm.expect(action).to.eql(\"bets\");\r",
											"});\r",
											"\r",
											"pm.test(\"All success must be string\", function () {\r",
											"    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(data_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"All amount parameter must be number\", function () {\r",
											"   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
											"   pm.expect(typeof(before)).to.eql(\"number\");\r",
											"   pm.expect(typeof(after)).to.eql(\"number\");\r",
											"});\r",
											"\r",
											"if (typeof(number_amount) == \"number\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
											"        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
											"        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
											"        var sum = bet1 + bet2 + bet3;\r",
											"\r",
											"   pm.expect(sum).to.eql(number_amount);\r",
											"});\r",
											"};\r",
											"\r",
											"if (typeof(number_amount) === \"undefined\") {\r",
											"   pm.test(\"before/balance are correct\", function () {\r",
											"   pm.expect(number_amount).to.eql(Number);\r",
											"});\r",
											"};\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/record/:mtcode",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"record",
										":mtcode"
									],
									"variable": [
										{
											"key": "mtcode",
											"value": "{{bets_mtcode1}}",
											"description": "{{bet_mtcode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - mtcode duplicate error, should return error code 2009",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"2009\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “account” parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “mtcode” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “mtcode” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “amount” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No amount parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “validbet” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “validbet” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “roundid” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No roundid parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “eventtime” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No eventtime parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No eventtime parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1004\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “gamecode” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No gamecode parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No “gamehall” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No gamehall parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n          \r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n          \r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No \"eventtime\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No eventtime parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - No \"ucode\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No ucode parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\"\r\n\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - The “amount” parameter is negative, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wins - If the player not found, should return error code 1006",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"If the player not found, should return error code 1006\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1006\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"fakeplayer\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Refunds",
					"item": [
						{
							"name": "Refunds - Check Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Refunds - Batch Bets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
											"    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
											"    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
											"\r",
											"    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
											"\r",
											"    var currentBalance = parseFloat(jsonData.data.balance);\r",
											"    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
											"    \r",
											"    // if(currentBalance != sourceBalance){\r",
											"    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    // }\r",
											"\r",
											"    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
											"    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
											"    if(currentBalance == calcBalance){\r",
											"        calcBalance = currentBalance;\r",
											"    }\r",
											"\r",
											"    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", currentBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refunds - The correct request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 1000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"   var balance = jsonData.data.balance;\r",
											"   var status_code = jsonData.status.code;\r",
											"   var res_currency = jsonData.data.currency;\r",
											"   var d = (balance.toString().split(\".\")[1].length);\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance is correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = sourceBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != correctBalance+1){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"    else{\r",
											"        pm.expect(\"The status_code must be \" + correctBalance)    \r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refunds - The mtcode record is already refunded, should return error code 1015",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The mtcode record is already refunded, should return error code 1015\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1015\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refunds - No “mtcode” parameter, should return error code 1003",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “mtcode” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": null\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refunds - If the mtcode record not found, should return error  code 1014",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"If the mtcode record not found, should return error  code 1014\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1014\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"testErrorMtCode\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cancel",
					"item": [
						{
							"name": "Cancel - Check Balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var message = jsonData.status.message;\r",
											"  };\r",
											"\r",
											"if (balance != \"0\") {\r",
											"    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
											"    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
											"   };\r",
											"postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
											"\r",
											"pm.test(\"The data type of amount should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"    pm.expect(message).to.eql(\"Success\");\r",
											"});\r",
											" \r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
											"setTimeout(function(){  console.log('延时1秒'); }, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Wtoken",
										"value": "{{wtoken}}"
									}
								],
								"url": {
									"raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"balance",
										":account"
									],
									"query": [
										{
											"key": "gamecode",
											"value": "{{slot_gamecode}}"
										}
									],
									"variable": [
										{
											"key": "account",
											"value": "{{account}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel - The correct bet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
											"    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
											"    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
											"\r",
											"    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
											"\r",
											"    var currentBalance = parseFloat(jsonData.data.balance);\r",
											"    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
											"    \r",
											"    // if(currentBalance != sourceBalance){\r",
											"    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    // }\r",
											"\r",
											"    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
											"    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
											"    if(currentBalance == calcBalance){\r",
											"        calcBalance = currentBalance;\r",
											"    }\r",
											"\r",
											"    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", currentBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel - The correct refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
											"    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
											"    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
											"\r",
											"    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
											"\r",
											"    var currentBalance = parseFloat(jsonData.data.balance);\r",
											"    var calcBalance = parseFloat(originBalance + bets_1 + bets_2 + bets_3).toFixed(4);\r",
											"    \r",
											"    console.log(\"originBalance=\" + originBalance);\r",
											"    console.log(\"bets_1=\" + bets_1);\r",
											"    console.log(\"bets_2=\" + bets_2);\r",
											"    console.log(\"bets_3=\" + bets_3);\r",
											"    console.log(\"calcBalance=\" + calcBalance);\r",
											"    \r",
											"    // if(currentBalance != sourceBalance){\r",
											"    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    // }\r",
											"\r",
											"    console.log(\"currentBalance=\" + currentBalance);\r",
											"    \r",
											"\r",
											"    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
											"    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
											"    if(currentBalance == calcBalance){\r",
											"        calcBalance = currentBalance;\r",
											"    }\r",
											"\r",
											"    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", currentBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/refunds",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"refunds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel - The correct request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 1000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"var balance = jsonData.data.balance;\r",
											"   var status_code = jsonData.status.code;\r",
											"   var res_currency = jsonData.data.currency;\r",
											"   var d = (balance.toString().split(\".\")[1].length);\r",
											"   var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/cancel",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"cancel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel - The mtcode record is already canceled, should return error code 1015",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The mtcode record is already canceled, should return error code 1015\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1015\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/cancel",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"cancel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel - If the mtcode record not found, should return error  code 1014",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The mtcode record is already canceled, should return error code 1015\", function () {\r",
											"    pm.expect(jsonData.status.code).to.eql(\"1014\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mtcode\": [\r\n        \"fakemtcode\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/cancel",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"cancel"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Amends",
					"item": [
						{
							"name": "Amends - Batch Bets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom1=guid();",
											"var mtcodeRandom2=guid2();",
											"var mtcodeRandom3=guid3();",
											"",
											"postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
											"postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
											"postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
											"postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"   var jsonData = JSON.parse(responseBody);\r",
											"   var status_code = jsonData.status.code;\r",
											"   pm.test(\"Response time is less than 5000ms\", function () {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.balance;\r",
											"    var status_code = jsonData.status.code;\r",
											"    var res_currency = jsonData.data.currency;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"};\r",
											"\r",
											"pm.test(\"The balance wasn't correct\", function(){\r",
											"    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
											"    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
											"\r",
											"    var currentBalance = jsonData.data.balance;\r",
											"    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
											"\r",
											"    var correctBalance = currentBalance + bets_1 + bets_2;\r",
											"\r",
											"    if(currentBalance != sourceBalance){\r",
											"        pm.expect(\"Current balance wasn't correct, please check\");\r",
											"    }\r",
											"\r",
											"    pm.environment.set(\"bet_balance\", correctBalance);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(typeof(status_code)).to.include(\"string\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"     pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/bets",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"bets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - Wins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"function guid2(){",
											"   return s4()+s5();",
											"}",
											"function guid3(){",
											"   return s5()+s5();",
											"}",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"function s5(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"var bets_round3 = pm.environment.get(\"bets_round3\");",
											"",
											"var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
											"pm.environment.set(\"bets_1_win\", bets_1_win);",
											"",
											"var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
											"pm.environment.set(\"bets_2_win\", bets_2_win);",
											"",
											"var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
											"pm.environment.set(\"bets_3_win\", bets_3_win);",
											"",
											"",
											"postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
											"postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() + '-' + ",
											"            pad(this.getMonth() + 1) + '-' + ",
											"            pad(this.getDate()) + 'T' + ",
											"            pad(this.getHours()) + ':' + ",
											"            pad(this.getMinutes()) + ':' + ",
											"            pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var delayTimeStr = pm.environment.get(\"delayTime\");\r",
											"var delayTime = parseInt(delayTimeStr);\r",
											"\r",
											"pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
											"});\r",
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"    });\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.success[0].balance;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var res_currency = jsonData.data.success[0].currency;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
											"    pm.expect(d).to.be.equal(maxDigits);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/wins",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"wins"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends -The correct request",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var bets_round1 = pm.environment.get(\"bets_round1\");",
											"var bets_round2 = pm.environment.get(\"bets_round2\");",
											"",
											"postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round1 +\":cq9\")",
											"postman.setEnvironmentVariable(\"amend_mtcode4\", \"rel-amend-BPUP2019\"+ bets_round2 + \":cq9\")",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var status_code = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"    });\r",
											"};\r",
											"\r",
											"if (status_code == \"0\")\r",
											"{\r",
											"    var balance = jsonData.data.success[0].balance;\r",
											"    var d = (balance.toString().split(\".\")[1].length);\r",
											"    var res_currency = jsonData.data.success[0].currency;\r",
											"    var currency = pm.variables.get(\"currency\");\r",
											"    console.log(res_currency);\r",
											"};\r",
											"\r",
											"pm.test(\"The status_code must be 0\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of balance should be number\", function () {\r",
											"    console.log(\"Balance=>\"+balance);\r",
											"    pm.expect(typeof(balance)).to.include(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"The data type of status_code should be string\", function () {\r",
											"    pm.expect(status_code).to.eql(\"0\");\r",
											"});\r",
											" \r",
											"pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
											"     pm.expect(d).to.be.above(3);\r",
											"});\r",
											"\r",
											"pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
											"     pm.expect(res_currency).to.include(currency);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "wtoken",
										"value": "{{wtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - mtcode duplicate error, should return error code 2009",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"2009\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “account” parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “mtcode” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “mtcode” parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “amount” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “amount” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “validbet” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “validbet” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “roundid” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “roundid” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “eventtime” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “eventtime” parameter in event, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n         \r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The eventime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1004\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"2020-09-02T02:07:02.126-04\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"2020-09-02T02:07:02.126-04\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No “gamecode” parameter in event, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(){",
											"   return s4()+s4();",
											"}",
											"",
											"",
											"function s4(){",
											"   return Math.floor((1+Math.random())*0x10000)",
											"   .toString()",
											"   .substring(1);",
											"}",
											"",
											"var mtcodeRandom=guid();",
											"",
											"",
											"postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+mtcodeRandom+\":cq9\")",
											"postman.setEnvironmentVariable(\"amend_mtcode4\",\"rel-amend-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
											"postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No “eventtime” parameter in event, should return error code 1003\", function () {\r",
											"    console.log(\"GamecodeError:\"+jsonData.data.failed[0].code);\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\"\r\n          \r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No \"eventtime\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No eventtime parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No \"ucode\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No ucode parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\"\r\n      \r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No \"amount\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No amount parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - No \"action\" parameter, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No action parameter, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n     \r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - The “amount” parameter is negative, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": -200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends - The “amount” parameter in event is negative, should return error code 1003",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											"",
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"The “amount” parameter in event is negative, should return error code 1003\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						},
						{
							"name": "Amends -  If the player not found, should return error code 1006",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"Date.prototype.toIsoString = function(timezone) {",
											" var tzo = timezone * 60,",
											"     dif = tzo >= 0 ? '+' : '-',",
											"     pad = function(num) {",
											"         var norm = Math.floor(Math.abs(num));",
											"         return (norm < 10 ? '0' : '') + norm;",
											"     };",
											"     ",
											"     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
											"     this.setHours(this.getHours() + timeOffset)",
											"     ",
											"     var dt = this.getFullYear() +",
											"         '-' + pad(this.getMonth() + 1) +",
											"        '-' + pad(this.getDate()) +",
											"     'T' + pad(this.getHours()) +",
											"     ':' + pad(this.getMinutes()) +",
											"     ':' + pad(this.getSeconds());",
											"     ",
											"     if (timezone == 0) {",
											"         return dt + 'Z';",
											"     } else {",
											" return dt +",
											"        dif + pad(tzo / 60) +",
											"     ':' + pad(tzo % 60);",
											"     }",
											"}",
											"",
											"var timezone = -4;",
											"var dt = new Date();",
											"postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
											"setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"if (pm.response.code == \"200\") {\r",
											"    var jsonData = JSON.parse(responseBody);\r",
											"    var no_parameter = jsonData.status.code;\r",
											"    pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});};\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"  pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\" If the player not found, should return error code 1006\", function () {\r",
											"    pm.expect(jsonData.data.failed[0].code).to.eql(\"1006\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "wtoken",
										"type": "text",
										"value": "{{wtoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"fakeplayer\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}"
								},
								"url": {
									"raw": "{{swclient}}/transaction/game/amends",
									"host": [
										"{{swclient}}"
									],
									"path": [
										"transaction",
										"game",
										"amends"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "delayTime",
			"value": "1000"
		}
	]
}