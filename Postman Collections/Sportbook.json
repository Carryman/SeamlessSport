{
  "info": {
    "_postman_id": "4f702dd2-f66c-4a04-82e0-f6373ad645cc",
    "name": "Sportsbook_1",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Normal Flow",
      "item": [
        {
          "name": "Scenario 1 Multi bets wins",
          "item": [
            {
              "name": "SC1-Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "   \r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e3aef1af-4509-449f-85e8-b5d6f9719649"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "049b2cb4-9c35-4afc-9c2d-04761b25bd28"
                  }
                }
              ],
              "_postman_id": "cf3b76e0-c242-42c5-93f2-b1be4f1d6aaf",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "b0fd90c9-39a4-4a00-b301-228af78bc548",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC1-Batch Bets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = String(balance.toString().split(\".\")[1]).length;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
                      "    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
                      "    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
                      "\r",
                      "    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
                      "\r",
                      "    var currentBalance = parseFloat(jsonData.data.balance);\r",
                      "    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
                      "    \r",
                      "    // if(currentBalance != sourceBalance){\r",
                      "    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    // }\r",
                      "\r",
                      "    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
                      "    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
                      "    if(currentBalance == calcBalance){\r",
                      "        calcBalance = currentBalance;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", currentBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "\r",
                      "    if(d > maxDigits){\r",
                      "        pm.environment.set(d);\r",
                      "        maxDigits = d;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a33223e9-eb37-4a0e-aecf-f3a3f228db76"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cf077727-e024-40e8-9a4e-742f915c3082"
                  }
                }
              ],
              "_postman_id": "f87a5fff-6a87-412a-a9f4-ce23089448e1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "SC1-Record Bet",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "42d8e1c3-79b0-4567-8e77-2f811fdb5b65"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct11111\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "    console.log(\"number_amount =>\" + number_amount);\r",
                      "    console.log(\"sum =>\" + sum);\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct2222\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7c21552c-88ec-4f42-bc9e-8293f4277e0a"
                  }
                }
              ],
              "_postman_id": "a224bc09-6154-4050-a8e0-6d9848f5a2d8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "7733b0b8-0eb5-4ba2-ba62-c094b23d5c9c",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC1-Wins",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
                      "pm.environment.set(\"bets_1_win\", bets_1_win);",
                      "",
                      "var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
                      "pm.environment.set(\"bets_2_win\", bets_2_win);",
                      "",
                      "var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
                      "pm.environment.set(\"bets_3_win\", bets_3_win);",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6af30a8a-8026-479c-aa7b-8e5b7b8e3fba"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.success[0].balance;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var res_currency = jsonData.data.success[0].currency;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3ac099ab-eacb-4abe-bcf8-ab7c8abdf811"
                  }
                }
              ],
              "_postman_id": "bd1594a3-b869-4432-bb77-a504bb96b233",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "SC1-Wins Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "117c2913-27ce-497a-8af0-8473019da696"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = (after - before).toFixed(4);\r",
                      "//    verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bet\", function () {\r",
                      "    pm.expect(action).to.eql(\"wins\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bets_1_win = parseFloat(pm.environment.get(\"bets_1_win\"));\r",
                      "        var bets_2_win = parseFloat(pm.environment.get(\"bets_2_win\"));\r",
                      "        var bets_3_win = parseFloat(pm.environment.get(\"bets_3_win\"));\r",
                      "        var sum = bets_1_win + bets_2_win + bets_3_win;\r",
                      "   pm.expect(number_amount).to.eql(sum);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "555c1b72-a780-49a6-b75b-33de58729cac"
                  }
                }
              ],
              "_postman_id": "32d86fab-ce25-432b-bf7a-5d24b62d2406",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "8b47088f-771e-43e2-a445-0f5d022fa2a5",
                      "key": "mtcode",
                      "value": "{{wins_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "36e6e065-db5d-494b-a528-a90d95ede237",
          "_postman_isSubFolder": true
        },
        {
          "name": "Scenario 2 Multi bets refunds(all)",
          "item": [
            {
              "name": "SC2-Balance",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "5e97551e-98d8-4877-95d0-5830c5dfa5e9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ffed1d60-7a51-449b-adc0-a97bc73cafdb"
                  }
                }
              ],
              "_postman_id": "21cecc54-874a-4c8b-be52-f67b53af5a11",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "db93440b-f844-40ba-9dce-7c9f06023707",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC2-Batch Bets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5fda4125-2094-40c9-bed5-4dad1a62f0c5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = currentBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != sourceBalance){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", correctBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "     pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4de45b89-d269-4650-8ddf-885c6be8aff0"
                  }
                }
              ],
              "_postman_id": "c3ccea25-96dd-4e86-9b30-406944668c54",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "SC2-Record Bet",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "ed0c1cf6-46c7-4c97-a086-250156f2c473"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "15ec11fb-b6a1-4c15-bde5-7b7084c64dec"
                  }
                }
              ],
              "_postman_id": "90332822-28f0-4fd2-948d-f084b377fe49",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "34d0c36b-76fb-4b3c-9499-1609810fe76e",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC2-Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   var res_currency = jsonData.data.currency;\r",
                      "   var d = (balance.toString().split(\".\")[1].length);\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance is correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "    var bets_3 = postman.getEnvironmentVariable(\"bets_3\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = sourceBalance + bets_1 + bets_2 + bets_3;\r",
                      "\r",
                      "    if(currentBalance != correctBalance+1){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "    else{\r",
                      "        pm.expect(\"The status_code must be \" + correctBalance)    \r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "83f9db48-af4d-4d2a-9e00-73e507e66ed7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "d8979782-8aca-45bf-aff9-e0c0a3543285"
                  }
                }
              ],
              "_postman_id": "33a55ea2-83ac-41a5-a27e-2f459e6566e8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "SC2-Refund Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "3c9837f1-cca9-4c83-a81f-f846280e07df"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = (after - before).toFixed(4);\r",
                      "//    verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bet\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bets_1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bets_2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bets_3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bets_1 + bets_2 + bets_3;\r",
                      "   pm.expect(number_amount).to.eql(sum);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b112e78f-acc3-4d0a-9ae0-57a0d5b9dc78"
                  }
                }
              ],
              "_postman_id": "0eca366a-a9f0-407f-9c0b-aa5d929b9a9c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "2d9305be-cd6f-4490-975e-e8b3ad5511ef",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "964e93bb-c0b7-42de-8165-42566ccd7e37",
          "description": "Bets完之後全部Refund",
          "_postman_isSubFolder": true
        },
        {
          "name": "Scenario 3 Multi bets refunds(2/3) cancels(3)",
          "item": [
            {
              "name": "SC3-Balance",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "0b399aac-7b0d-45d9-beb2-d7f4b180c0ff"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "66241038-2bf6-4e72-aff2-275375c6e3c7"
                  }
                }
              ],
              "_postman_id": "65f97391-a377-4038-90ee-c582b9cdc5c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "9c4b5f15-b2a7-45eb-af06-e1463f75eec8",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC3-Batch Bets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "445d2457-485d-42ee-9a2b-963e7115eb22"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = currentBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != sourceBalance){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", correctBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "     pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "13f01384-66a9-4788-bced-2c2cb112605b"
                  }
                }
              ],
              "_postman_id": "79cb6ead-140e-458e-ae6e-fcea083c9ba6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "SC3-Record Bet",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "bc97104c-d5f5-4e2c-a0e8-01f545481365"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3ba165da-bd8d-4b85-be9a-abd24e7009a1"
                  }
                }
              ],
              "_postman_id": "0ef594db-53a1-40bd-88dc-79651f9eaf4d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "b827672e-27fb-4ee5-8f8f-e3547565d652",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC3-Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   var res_currency = jsonData.data.currency;\r",
                      "   var d = (balance.toString().split(\".\")[1].length);\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var datetime = jsonData.status.datetime;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance is correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "    var bets_3 = postman.getEnvironmentVariable(\"bets_3\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = sourceBalance + bets_1 + bets_2 + bets_3;\r",
                      "\r",
                      "    if(currentBalance != correctBalance+1){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "    else{\r",
                      "        pm.expect(\"The status_code must be \" + correctBalance)    \r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "33cf5fe1-d134-453c-9cf2-1f5e8fd87ed1"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "ab692f97-865d-4014-833d-aa532da60798"
                  }
                }
              ],
              "_postman_id": "22d5fa91-3133-4187-9ec2-f84ff61dac88",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "SC3-Refund Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "1cc4e473-59da-4d69-a36e-2c2dce237b68"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = (before - after).toFixed(4);\r",
                      "//    verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bet\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bets_1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var sum = bets_1;\r",
                      "   pm.expect(number_amount).to.eql(bets_1);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "49824085-529f-4981-b33b-fa21a25d2caf"
                  }
                }
              ],
              "_postman_id": "2781ce9c-e7ad-468f-a2f2-8f428c1d7dfa",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "11a8d4cb-3cb0-446e-80f8-9ab6e2fc6d38",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC3-Cancel",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "d614e395-ef3b-4b13-8103-4919fa12f649"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "var balance = jsonData.data.balance;\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   var res_currency = jsonData.data.currency;\r",
                      "   var d = (balance.toString().split(\".\")[1].length);\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "87d55af4-368b-4bec-8835-110f97e0488f"
                  }
                }
              ],
              "_postman_id": "b2f9622c-ba83-4eb6-80c9-17e19b8d9e92",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/cancel"
              },
              "response": []
            },
            {
              "name": "SC3-Cancel Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "a1c2b5f5-dc85-4dfd-9ff5-87b10a405f92"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bet\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\"));\r",
                      "        var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\"));\r",
                      "\r",
                      "        var sum = bets_1 + bets_3;\r",
                      "   pm.expect(number_amount).to.eql(sum);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e1b6ce9f-a1f3-4a7f-91d9-ab16f5e28688"
                  }
                }
              ],
              "_postman_id": "3dde00c3-fcdb-4047-9384-2669bab4d32c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "2b41321e-2bf1-46e3-a509-af7b5f923869",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "ee1abe7d-498e-47f1-b86e-c6c9c05361c9",
          "description": "Bets(1/2/3) -> Refunds(2/3) -> Cancels(3)",
          "_postman_isSubFolder": true
        },
        {
          "name": "Scenario 4 Multi bets amends",
          "item": [
            {
              "name": "SC4-Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a355714d-ec0c-45f6-b8b6-2de088c96e2e"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "db96bc6f-4cb6-4751-a0b0-171d1eca4b39"
                  }
                }
              ],
              "_postman_id": "ef2a3958-bfa8-4d71-be12-818b0dc31a29",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "3b51ce83-9b22-40c0-aa25-0718bb1e4e60",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC4-Batch Bets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
                      "    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
                      "    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
                      "\r",
                      "    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
                      "\r",
                      "    var currentBalance = parseFloat(jsonData.data.balance);\r",
                      "    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
                      "    \r",
                      "    // if(currentBalance != sourceBalance){\r",
                      "    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    // }\r",
                      "\r",
                      "    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
                      "    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
                      "    if(currentBalance == calcBalance){\r",
                      "        calcBalance = currentBalance;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", currentBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f746d201-25d6-45a2-bc36-d443505ed800"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4cfba7ce-7dc7-4bcd-8204-30ee9160252a"
                  }
                }
              ],
              "_postman_id": "143c40de-ecfd-4ad2-82a6-639ba03ff970",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "SC4-Record Bet",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "263e64aa-a183-4092-b890-779e0345870b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6b05fe89-9bf8-4bd2-b6ec-4cfc00002c80"
                  }
                }
              ],
              "_postman_id": "6ea1f89d-4969-4ca6-ad10-80149b3e0d4b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "6394ee8a-9e66-44c7-9281-0a64a5e1836a",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC4-Wins",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
                      "pm.environment.set(\"bets_1_win\", bets_1_win);",
                      "",
                      "var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
                      "pm.environment.set(\"bets_2_win\", bets_2_win);",
                      "",
                      "var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
                      "pm.environment.set(\"bets_3_win\", bets_3_win);",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cd69f86f-c68b-4e1b-a374-47c8e8440697"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.success[0].balance;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var res_currency = jsonData.data.success[0].currency;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9438aa90-6d60-4910-ac45-f8b581b4b91e"
                  }
                }
              ],
              "_postman_id": "e85ec22c-ac9b-43e8-9899-1b6b437583c3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "SC4-Wins Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "c2799b0e-a847-479a-a64f-e9ebc77bb25b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = (after - before).toFixed(4);\r",
                      "//    verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bet\", function () {\r",
                      "    pm.expect(action).to.eql(\"wins\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bets_1_win = parseFloat(pm.environment.get(\"bets_1_win\"));\r",
                      "        var bets_2_win = parseFloat(pm.environment.get(\"bets_2_win\"));\r",
                      "        var bets_3_win = parseFloat(pm.environment.get(\"bets_3_win\"));\r",
                      "        var sum = bets_1_win + bets_2_win + bets_3_win;\r",
                      "   pm.expect(number_amount).to.eql(sum);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "edcc2774-08e8-4641-acda-03351aea5ec8"
                  }
                }
              ],
              "_postman_id": "9611bad4-59e8-4208-8f67-c1273fcb2352",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "6a5d9343-d12e-458b-9daf-cbb8d1ea2c4b",
                      "key": "mtcode",
                      "value": "{{wins_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC4-Amends Credit",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round1 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"amend_mtcode4\", \"rel-amend-BPUP2019\"+ bets_round2 + \":cq9\")",
                      "",
                      "console.log(\"round1 => \" + bets_round1);",
                      "console.log(\"round2 => \" + bets_round2);",
                      "console.log(\"round3 => \" + bets_round3);",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "04e87d20-b861-46f1-998d-c41a8101f9b9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "var status_code = jsonData.status.code;\r",
                      "pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "var balance = jsonData.data.success[0].balance;\r",
                      "var d = (balance.toString().split(\".\")[1].length);\r",
                      "var res_currency = jsonData.data.success[0].currency;\r",
                      "var currency = pm.variables.get(\"currency\");\r",
                      "console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "21014ab2-1bd5-4cb6-ad1b-c3dfc28013b0"
                  }
                }
              ],
              "_postman_id": "9d60fced-eb43-43f8-87eb-476a9e45be2c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "SC4-Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "29e48d75-e89b-43b1-ae0e-0cc510140971"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "e73499b4-1d74-4fc5-b35f-9c2d66c7d123"
                  }
                }
              ],
              "_postman_id": "13776872-6bc1-4ce5-9448-cea6c75f7866",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "f9cf4317-b14d-459c-b797-e9ca5e7808f9",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "SC4-Amends Debit",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round3 +\":cq9\");",
                      "",
                      "console.log(\"bets_round3 => \" + bets_round3);",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "30ea1b70-8664-496c-b6b2-209f9e170ff1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "var jsonData = JSON.parse(responseBody);\r",
                      "var status_code = jsonData.status.code;\r",
                      "pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "var balance = jsonData.data.success[0].balance;\r",
                      "var d = (balance.toString().split(\".\")[1].length);\r",
                      "var res_currency = jsonData.data.success[0].currency;\r",
                      "var currency = pm.variables.get(\"currency\");\r",
                      "console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8fb95f7c-274b-4984-a43c-4a5a2dbbe685"
                  }
                }
              ],
              "_postman_id": "fd8f8e51-49f5-4abb-9aee-7e3d12d35cad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"dedit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"dedit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "SC4-Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2795d6ae-0b6e-41e7-8f96-8a9d2cb7679d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "bac745a9-a9a7-46b4-be45-d73d14ca956e"
                  }
                }
              ],
              "_postman_id": "c4afee77-9adc-404d-9641-2296b1f851d1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "79f83bbe-a705-4d1b-8821-81ebfcb8f769",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "7ded281f-f5ab-48cc-b0a1-ac4e0d56f56a",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "fb86e187-0349-4727-b48e-0b7370784079"
    },
    {
      "name": "Unit Test",
      "item": [
        {
          "name": "Bets",
          "item": [
            {
              "name": "Batch Bets - The correct request",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7a77c8de-7899-4ad3-b267-1f1829ff2ad0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = currentBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != sourceBalance){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", correctBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "     pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "27964def-1bb2-41c6-bf3c-916f3bd0d83e"
                  }
                }
              ],
              "_postman_id": "06a50f6c-24e4-4072-9496-01d3401ec7ba",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - mtcode duplicate error, should return error code 2009",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a7dac257-2879-4102-981b-91898816de7f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"2009\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "2839acb1-e4f5-4a29-af54-d37505a1e2b1"
                  }
                }
              ],
              "_postman_id": "4e1b4eeb-47c0-4cdf-be1e-68e3bf458920",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “account” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3fae8dfb-e076-4dca-bcd9-4bcd41c27630"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6a7979d5-eafb-4a88-bd7e-32989df0dc60"
                  }
                }
              ],
              "_postman_id": "4cef72ea-4658-4e30-a89b-91e0ccf07e64",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “gamehall” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b4468b3a-5e07-4d92-806c-a84a85a41058"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “gamehall” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "4af2d4d8-05b9-4b49-af6d-59d108954741"
                  }
                }
              ],
              "_postman_id": "a08adf68-2026-4d6c-8cb7-dd046cb68c54",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “gamecode” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "04029a42-a61b-4129-b917-44e766f991f8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “gamecode” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "21d56a54-14a4-4dd1-b20c-747984b4aa31"
                  }
                }
              ],
              "_postman_id": "b4a110a8-213e-4330-bad5-e306b15fa428",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “mtcode” parameter in data, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7e56411f-490c-4b60-bdff-81d1624c55b9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “mtcode” parameter in data, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c80a42e9-906a-488c-8c37-8e8fa582bbb8"
                  }
                }
              ],
              "_postman_id": "318b9b75-8e82-420e-b787-36311cb2e208",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “amount” parameter in data, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d65bf5d8-b775-4256-9f4a-053e40ee19c2"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\" No “amount” parameter in data, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "22591fc6-6af8-4143-a343-2093ea38a79a"
                  }
                }
              ],
              "_postman_id": "e0c40397-518d-4ce6-b6ff-72d97c8eedc9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “roundid” parameter in data, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cb108998-7399-4729-947d-f1728a4cd11c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “roundid” parameter in data, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d924851a-ef36-4e45-91a8-47ee72400426"
                  }
                }
              ],
              "_postman_id": "8739f587-c72d-4315-b54d-40ecf4e1e059",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n     \r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - No “eventtime” parameter in data, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "339e328a-dc25-4335-ae7f-ae874896139e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “eventtime” parameter in data, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8f95dbe8-e57a-4fa6-be3f-49cba58ceea2"
                  }
                }
              ],
              "_postman_id": "0529f56f-5321-4903-a6ea-ee43752fb925",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f0ff3ac3-73ab-4647-b115-f33270ea6eef"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The eventime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1004\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "adbf8e3d-1a60-483f-bffe-afc722fd0455"
                  }
                }
              ],
              "_postman_id": "4beafb57-e6da-42a6-9fd6-78ed54648984",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}1\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"2020-08-06T04:30:00\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}2\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"2020-08-06T04:30:00\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - The createTime parameter has wrong time foramat in data, should return error code 1004",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "db840be9-6ff6-4fa4-924f-3a3cc6b1aacf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Batch Bets -The createTime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1004\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "497023cb-8a66-42be-ad32-b53aeb8e2529"
                  }
                }
              ],
              "_postman_id": "f0c0660f-5c21-4bb9-867e-166ec3652d79",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}1\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}1\",\r\n      \"amount\": 1,\r\n     \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"2020-08-06T04:30:00\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - The “amount” parameter is negative, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//將bets_1改為負值, 測試後再還原",
                      "postman.setEnvironmentVariable(\"bets_1\", -10.22);",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d8ff0a61-9fda-4198-a5be-fb1b335012b4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//還原正常的bets_1\r",
                      "postman.setEnvironmentVariable(\"bets_1\", 10.22);\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6cef5620-5f34-4fa4-982c-2d093895afa0"
                  }
                }
              ],
              "_postman_id": "4466369f-1d22-4159-b784-98c469055814",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - Insufficient Balance, should return error code 1005",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "var mtcodeRandom2=guid2();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode\",\"rel-bet-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round\",mtcodeRandom)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "99e04f33-454c-4fa4-8250-926842a8b4aa"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\" Insufficient Balance, should return error code 1005\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1005\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "546fa506-0dbc-46e4-988c-ce95d422107d"
                  }
                }
              ],
              "_postman_id": "849e130a-ca36-40e0-aa00-5254339f37a0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 999999999999,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 999999999999,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Batch Bets - If the player not found, should return error code 1006",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6e5b978d-a505-4ffb-9cf1-ee1120527ba5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"If the player not found, should return error code 1006\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1006\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "af0d5aba-f5a8-4059-9832-0ff56bb0b6c5"
                  }
                }
              ],
              "_postman_id": "6f679e56-31e7-48a8-ad87-0a0d83ed2d58",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"fakeplayer\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": 1,\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Record - Batch Bets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "53689687-1fb5-4cf3-9272-14deba04b31b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8c34bd74-6d71-4e6e-a866-2c36548a2b66"
                  }
                }
              ],
              "_postman_id": "ea62cdda-6d44-49b4-baa3-a13043a9a3da",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "a131b7d3-b5f4-45a8-a0c2-fd85a6e2f0c2",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_id": "4d2c41d2-76e5-466c-a11a-039a47f5d337",
          "_postman_isSubFolder": true
        },
        {
          "name": "Wins",
          "item": [
            {
              "name": "Wins - Balance",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "35a22272-1a78-4c76-9eab-0154f57ae16e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0ea769b3-ce9c-4c4f-9f80-83ebd112aaed"
                  }
                }
              ],
              "_postman_id": "b40e7111-75b0-400f-a4bb-2301f19cef59",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "de755e30-a286-4040-a448-6e2231342aa8",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Wins - Batch Bets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7dea79fd-e600-434e-9fad-7a99d10df6f1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = currentBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != sourceBalance){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", correctBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "     pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f168f2fb-e9fb-4d95-a93b-edc6d4df601c"
                  }
                }
              ],
              "_postman_id": "2487e5ad-4229-4177-a47f-824b0b8b9a6e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Wins - Wins",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
                      "pm.environment.set(\"bets_1_win\", bets_1_win);",
                      "",
                      "var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
                      "pm.environment.set(\"bets_2_win\", bets_2_win);",
                      "",
                      "var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
                      "pm.environment.set(\"bets_3_win\", bets_3_win);",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e8c01f66-dd23-421f-8441-76551c6b8d58"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.success[0].balance;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var res_currency = jsonData.data.success[0].currency;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a0833369-7fbc-468d-b965-eae42265d3ee"
                  }
                }
              ],
              "_postman_id": "45f0da06-56fd-4ad9-94a8-304cb4ebffe0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - Record",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "6c75df3a-1299-499f-943b-66885e9bb4b3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200 and Response time is less than 1000ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      "if (pm.response.code == \"200\")\r",
                      "{\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "   var action = jsonData.data.action;\r",
                      "   var status_status = jsonData.data.status.status;\r",
                      "   var status_message = jsonData.data.status.message;\r",
                      "   var data_currency = jsonData.data.currency;\r",
                      "   var before = jsonData.data.before;\r",
                      "   var after = jsonData.data.balance;\r",
                      "   var verify_amount = before - after;\r",
                      "   verify_amount = verify_amount.toFixed(4);\r",
                      "   var number_amount = Number(verify_amount);\r",
                      "   var res_amount = jsonData.data.event[0].amount;\r",
                      "};\r",
                      "\r",
                      "pm.test(\"action must be bets\", function () {\r",
                      "    pm.expect(action).to.eql(\"bets\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All success must be string\", function () {\r",
                      "    pm.expect(status_status).to.eql(\"success\")&& pm.expect(status_message).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(data_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code must be 0 and string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"All amount parameter must be number\", function () {\r",
                      "   pm.expect(typeof(res_amount)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(before)).to.eql(\"number\");\r",
                      "   pm.expect(typeof(after)).to.eql(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (typeof(number_amount) == \"number\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "        var bet1 = parseFloat(pm.environment.get(\"bets_1\"));\r",
                      "        var bet2 = parseFloat(pm.environment.get(\"bets_2\"));\r",
                      "        var bet3 = parseFloat(pm.environment.get(\"bets_3\"));\r",
                      "        var sum = bet1 + bet2 + bet3;\r",
                      "\r",
                      "   pm.expect(sum).to.eql(number_amount);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      "if (typeof(number_amount) === \"undefined\") {\r",
                      "   pm.test(\"before/balance are correct\", function () {\r",
                      "   pm.expect(number_amount).to.eql(Number);\r",
                      "});\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9364570e-89ae-4e98-bf31-c9d8f19a7df1"
                  }
                }
              ],
              "_postman_id": "cf0299e4-031b-4ba1-be22-ce3c80f8f5ef",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/record/:mtcode",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "record",
                    ":mtcode"
                  ],
                  "variable": [
                    {
                      "id": "b9ab4090-8307-4191-9eb2-c0d98486bdbf",
                      "key": "mtcode",
                      "value": "{{bets_mtcode1}}",
                      "description": "{{bet_mtcode}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Wins - mtcode duplicate error, should return error code 2009",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "44b39e0f-495f-4ed8-bac4-1bc9f7e3893e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"2009\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c84d29cf-7971-458e-955d-73b5dc4de3e4"
                  }
                }
              ],
              "_postman_id": "55ab0663-6e17-48e1-ba23-5488d4e713f0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “account” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8dd1e2c8-3f07-4660-8058-2f9beb71ad40"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1ae36f36-63a9-458a-bb2a-9547042d6e58"
                  }
                }
              ],
              "_postman_id": "9e0543e9-c43d-4b3e-84b8-109bd2328254",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “mtcode” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "95843306-fc21-4f2b-bd47-359522f60af6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “mtcode” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "32eb11b4-1d19-498c-a1a4-090da3ffd9a9"
                  }
                }
              ],
              "_postman_id": "32f7fd58-7987-4191-b020-c494eab3b6b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \r\n          \"amount\": 20,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “amount” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "53a6672a-d4be-4b48-af40-a0f3e25f2b0f"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No amount parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f6ca1555-1900-4b3e-82ae-c572f84efd09"
                  }
                }
              ],
              "_postman_id": "c3d38240-c5b2-48bd-84b0-3dd0358d9c81",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “validbet” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "744fd31a-2ead-40cf-b7c6-9cee2ea710e9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “validbet” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a0540846-7b06-4447-8007-ce5210939ee5"
                  }
                }
              ],
              "_postman_id": "d2998d20-68fb-4acd-ab1a-3052ac140a3c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “roundid” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d325321c-391f-46c5-a746-58127775ba2e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No roundid parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "07453111-901d-4d63-85d2-0e2b41860031"
                  }
                }
              ],
              "_postman_id": "c2cf715b-00ef-4c71-9c68-5529e02316a5",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “eventtime” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b2f583e3-1d83-46d5-a93c-30822da06425"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No eventtime parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9a5e316e-39a1-4255-acb4-c72db236c7cd"
                  }
                }
              ],
              "_postman_id": "46fc4e43-637f-46c1-a9cc-8e5670cb5038",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c238542c-587e-4659-a7e4-a6823e77964b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No eventtime parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1004\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "da6be5c6-8b3f-451e-807d-8b6c21219e56"
                  }
                }
              ],
              "_postman_id": "5816f4c4-8f4e-4787-a964-27f39bda810c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"2020-09-01T08:15:15-04\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “gamecode” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6512089c-51f6-407f-a6f2-e21bd310954e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No gamecode parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fbc05bd3-4c28-460c-831b-38a73f815ee5"
                  }
                }
              ],
              "_postman_id": "f46ba6c1-59a4-4cfb-9499-ed1da4d43ced",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No “gamehall” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8792206b-517c-4883-9a56-a4f7b0424faa"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No gamehall parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f70901c7-0bc8-4864-9082-75735fa1138b"
                  }
                }
              ],
              "_postman_id": "42b4db6d-a150-4bd6-bb1a-79529363f60d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n          \r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n          \r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No \"eventtime\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode\",\"rel-win-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\",\"rel-win-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "27749e89-e6e1-472d-91da-bc1943f5897b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No eventtime parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "60350613-1678-4fe0-8d79-21fead81a4f6"
                  }
                }
              ],
              "_postman_id": "fe1d07a1-f067-47dd-bed4-24f58452a80b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - No \"ucode\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "8571e923-fbbb-4248-8f49-aded0e5169ad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No ucode parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "93471507-a306-4c4a-a8da-51be4a5918a8"
                  }
                }
              ],
              "_postman_id": "6c17d796-a653-4c50-b14f-427b159fc967",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\"\r\n\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - The “amount” parameter is negative, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "893513d5-6d79-4e11-943f-36be4ee0c0a7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "de7c0014-25d1-4e6d-b1eb-2f5316c4deba"
                  }
                }
              ],
              "_postman_id": "987fb74e-2db3-418b-918e-6dafad7ac594",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Wins - If the player not found, should return error code 1006",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "23d7f179-09cc-4cf4-af8e-f1bd143a5f23"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"If the player not found, should return error code 1006\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1006\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d9a84027-1f2a-4e1a-85c0-0e48ad3f16ea"
                  }
                }
              ],
              "_postman_id": "1cfee665-36cc-46e2-80f9-64e8da08a8d4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"fakeplayer\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":50,\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            }
          ],
          "_postman_id": "3ba21c49-34fc-4609-8265-3c67ecb8567d",
          "_postman_isSubFolder": true
        },
        {
          "name": "Refunds",
          "item": [
            {
              "name": "Refunds - Check Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "35683690-d16c-446a-be96-14be6a516c05"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "2dd94fe4-cafc-4328-9adc-04ccea747f41"
                  }
                }
              ],
              "_postman_id": "3e3b18e4-2af4-46f3-ad94-252507fad744",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "f4b39047-ad93-4b64-8de7-f81dbdb6aa5f",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Refunds - Batch Bets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
                      "    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
                      "    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
                      "\r",
                      "    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
                      "\r",
                      "    var currentBalance = parseFloat(jsonData.data.balance);\r",
                      "    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
                      "    \r",
                      "    // if(currentBalance != sourceBalance){\r",
                      "    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    // }\r",
                      "\r",
                      "    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
                      "    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
                      "    if(currentBalance == calcBalance){\r",
                      "        calcBalance = currentBalance;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", currentBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "f92e37ab-ac81-409d-a11e-d09d31fb460b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "02f5b43a-e794-4110-8b1c-2564f53c4301"
                  }
                }
              ],
              "_postman_id": "381721e0-21dc-425d-bdfe-72f2b085f3df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Refunds - The correct request",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "   var balance = jsonData.data.balance;\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   var res_currency = jsonData.data.currency;\r",
                      "   var d = (balance.toString().split(\".\")[1].length);\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance is correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = sourceBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != correctBalance+1){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "    else{\r",
                      "        pm.expect(\"The status_code must be \" + correctBalance)    \r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "282d0e4e-5555-4500-9749-431ee9493441"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "7faf55c9-4df1-4258-ba77-a82a5bafd69c"
                  }
                }
              ],
              "_postman_id": "6311acb8-a624-4e57-9326-d72e8a3e3f4f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "Refunds - The mtcode record is already refunded, should return error code 1015",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The mtcode record is already refunded, should return error code 1015\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1015\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "34f00483-f541-4b32-afae-33315f090988"
                  }
                }
              ],
              "_postman_id": "0cf2be7b-d094-43d3-843e-65928f43d257",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "Refunds - No “mtcode” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “mtcode” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "329608e8-1de4-4769-b0e6-6704cd60dae1"
                  }
                }
              ],
              "_postman_id": "16aaf9f2-bbb7-4dca-8e7f-b0b14a360968",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": null\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "Refunds - If the mtcode record not found, should return error  code 1014",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"If the mtcode record not found, should return error  code 1014\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1014\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "99aed310-8d7a-49a8-afbf-3c43b00f5b82"
                  }
                }
              ],
              "_postman_id": "9119f685-c450-4c36-830c-6b884c2b704b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"testErrorMtCode\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            }
          ],
          "_postman_id": "64667a91-7ffb-4d8a-bf44-f61c46ee2ce8",
          "_postman_isSubFolder": true
        },
        {
          "name": "Cancel",
          "item": [
            {
              "name": "Cancel - Check Balance",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var message = jsonData.status.message;\r",
                      "  };\r",
                      "\r",
                      "if (balance != \"0\") {\r",
                      "    var decimal_location = String(balance).indexOf(\".\") + 1;//获取小数点的位置\r",
                      "    var count = String(balance).length - decimal_location;//获取小数点后的个数\r",
                      "   };\r",
                      "postman.setEnvironmentVariable(\"Balance\", jsonData.data.balance); \r",
                      "\r",
                      "pm.test(\"The data type of amount should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0 and string, message must be Success\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "    pm.expect(message).to.eql(\"Success\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1bea2f46-010d-4e31-ae54-399f9b7fbb7b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"mtcode\",mtcodeRandom+\"14:cq9:test\")",
                      "setTimeout(function(){  console.log('延时1秒'); }, 1000)"
                    ],
                    "type": "text/javascript",
                    "id": "560608d4-d230-480e-a969-4f6f601a7de4"
                  }
                }
              ],
              "_postman_id": "72845fef-1243-4150-b18b-466759aed9b6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Wtoken",
                    "value": "{{wtoken}}"
                  }
                ],
                "url": {
                  "raw": "{{swclient}}/transaction/balance/:account?gamecode={{slot_gamecode}}",
                  "host": [
                    "{{swclient}}"
                  ],
                  "path": [
                    "transaction",
                    "balance",
                    ":account"
                  ],
                  "query": [
                    {
                      "key": "gamecode",
                      "value": "{{slot_gamecode}}"
                    }
                  ],
                  "variable": [
                    {
                      "id": "51b4cc6f-9c2c-4111-acaa-c58c3c67d07a",
                      "key": "account",
                      "value": "{{account}}",
                      "type": "string"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Cancel - The correct bet",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
                      "    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
                      "    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
                      "\r",
                      "    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
                      "\r",
                      "    var currentBalance = parseFloat(jsonData.data.balance);\r",
                      "    var calcBalance = (originBalance - bets_1 - bets_2 - bets_3).toFixed(4);\r",
                      "    \r",
                      "    // if(currentBalance != sourceBalance){\r",
                      "    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    // }\r",
                      "\r",
                      "    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
                      "    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
                      "    if(currentBalance == calcBalance){\r",
                      "        calcBalance = currentBalance;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", currentBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d8a44297-9603-4cd6-b7be-d25267514f36"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "acd45589-f4f2-44aa-9be7-ace376e6ca68"
                  }
                }
              ],
              "_postman_id": "dcadb93b-ba1c-417b-959f-7a9ce22c1202",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Cancel - The correct refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = parseFloat(postman.getEnvironmentVariable(\"bets_1\")).toFixed(4);\r",
                      "    var bets_2 = parseFloat(postman.getEnvironmentVariable(\"bets_2\")).toFixed(4);\r",
                      "    var bets_3 = parseFloat(postman.getEnvironmentVariable(\"bets_3\")).toFixed(4);\r",
                      "\r",
                      "    var originBalance = parseFloat(pm.environment.get(\"Balance\")).toFixed(4);\r",
                      "\r",
                      "    var currentBalance = parseFloat(jsonData.data.balance);\r",
                      "    var calcBalance = parseFloat(originBalance + bets_1 + bets_2 + bets_3).toFixed(4);\r",
                      "    \r",
                      "    console.log(\"originBalance=\" + originBalance);\r",
                      "    console.log(\"bets_1=\" + bets_1);\r",
                      "    console.log(\"bets_2=\" + bets_2);\r",
                      "    console.log(\"bets_3=\" + bets_3);\r",
                      "    console.log(\"calcBalance=\" + calcBalance);\r",
                      "    \r",
                      "    // if(currentBalance != sourceBalance){\r",
                      "    //     pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    // }\r",
                      "\r",
                      "    console.log(\"currentBalance=\" + currentBalance);\r",
                      "    \r",
                      "\r",
                      "    //因為有使用toFixed解決parseFloat小數點後位元造成的亂數導致計算結果會誤判因此強制在這邊進行數值比對\r",
                      "    //確認計算結果, 避免因小數點後的位數造成誤判 Ex: 80.301 == 80.3010\r",
                      "    if(currentBalance == calcBalance){\r",
                      "        calcBalance = currentBalance;\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(currentBalance).to.be.eql(calcBalance);\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", currentBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "87aac262-b4e5-4183-af56-bdeb28a81ba3"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "4afb3f6d-90d1-4edb-b7c1-e30c451a2dd8"
                  }
                }
              ],
              "_postman_id": "5c458770-86e9-44e6-a6bb-2ca073dad47e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/refunds"
              },
              "response": []
            },
            {
              "name": "Cancel - The correct request",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "a06229d0-ed8d-4a6a-9b39-ccb71d048e8c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "var balance = jsonData.data.balance;\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   var res_currency = jsonData.data.currency;\r",
                      "   var d = (balance.toString().split(\".\")[1].length);\r",
                      "   var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "756ed8ca-743d-424e-b1f3-bf9852dd2e95"
                  }
                }
              ],
              "_postman_id": "447a3360-592c-49c1-b10d-3c7d5c5dc4a6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\",\r\n        \"{{bets_mtcode3}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/cancel"
              },
              "response": []
            },
            {
              "name": "Cancel - The mtcode record is already canceled, should return error code 1015",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "059d8b06-3e24-4d47-ba3b-5bcb7a887368"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The mtcode record is already canceled, should return error code 1015\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1015\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "5a857787-86c4-46cc-820c-cb3df9abc96f"
                  }
                }
              ],
              "_postman_id": "0473aae3-ad2f-4d6f-ae09-284b3996318d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"{{bets_mtcode1}}\",\r\n        \"{{bets_mtcode2}}\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/cancel"
              },
              "response": []
            },
            {
              "name": "Cancel - If the mtcode record not found, should return error  code 1014",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 500)"
                    ],
                    "type": "text/javascript",
                    "id": "165286a0-1e9f-4747-bc66-8c51df973d95"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The mtcode record is already canceled, should return error code 1015\", function () {\r",
                      "    pm.expect(jsonData.status.code).to.eql(\"1014\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "25f868b4-3604-466d-954e-cc086cbc59cf"
                  }
                }
              ],
              "_postman_id": "9d686b50-9f4c-4429-bfd3-343a084215ed",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"mtcode\": [\r\n        \"fakemtcode\"\r\n    ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/cancel"
              },
              "response": []
            }
          ],
          "_postman_id": "5f8d02b8-7372-46c9-a155-832708e6f27a",
          "_postman_isSubFolder": true
        },
        {
          "name": "Amends",
          "item": [
            {
              "name": "Amends - Batch Bets",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom1=guid();",
                      "var mtcodeRandom2=guid2();",
                      "var mtcodeRandom3=guid3();",
                      "",
                      "postman.setEnvironmentVariable(\"bets_mtcode1\",\"rel-bet-BPUP2019\"+mtcodeRandom1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round1\",mtcodeRandom1)",
                      "postman.setEnvironmentVariable(\"bets_mtcode2\",\"rel-bet-BPUP2019\"+mtcodeRandom2+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round2\",mtcodeRandom2)",
                      "postman.setEnvironmentVariable(\"bets_mtcode3\",\"rel-bet-BPUP2019\"+mtcodeRandom3+\":cq9\")",
                      "postman.setEnvironmentVariable(\"bets_round3\",mtcodeRandom3)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 5000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "af4e11d9-243a-4a54-a8ac-5e4b73331343"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "   var jsonData = JSON.parse(responseBody);\r",
                      "   var status_code = jsonData.status.code;\r",
                      "   pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.balance;\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    var res_currency = jsonData.data.currency;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The balance wasn't correct\", function(){\r",
                      "    var bets_1 = postman.getEnvironmentVariable(\"bets_1\");\r",
                      "    var bets_2 = postman.getEnvironmentVariable(\"bets_2\");\r",
                      "\r",
                      "    var currentBalance = jsonData.data.balance;\r",
                      "    var sourceBalance = postman.getEnvironmentVariable(\"Balance\");\r",
                      "\r",
                      "    var correctBalance = currentBalance + bets_1 + bets_2;\r",
                      "\r",
                      "    if(currentBalance != sourceBalance){\r",
                      "        pm.expect(\"Current balance wasn't correct, please check\");\r",
                      "    }\r",
                      "\r",
                      "    pm.environment.set(\"bet_balance\", correctBalance);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(typeof(status_code)).to.include(\"string\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "     pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a0cdbf6f-275b-48a8-b025-1ac8f5f4eb7e"
                  }
                }
              ],
              "_postman_id": "3b829f34-71e3-4bb9-a118-f777e860df8d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"account\": \"{{account}}\",\r\n  \"gamehall\": \"cq9\",\r\n  \"gamecode\": \"BPUP2019\",\r\n  \"session\": \"\",\r\n  \"data\": [\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode1}}\",\r\n      \"amount\": {{bets_1}},\r\n      \"roundid\": \"{{bets_round1}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode2}}\",\r\n      \"amount\": {{bets_2}},\r\n      \"roundid\": \"{{bets_round2}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    },\r\n    {\r\n      \"mtcode\": \"{{bets_mtcode3}}\",\r\n      \"amount\": {{bets_3}},\r\n      \"roundid\": \"{{bets_round3}}\",\r\n      \"eventtime\": \"{{datetime}}\"\r\n    }\r\n   \r\n  ],\r\n  \"createTime\": \"{{datetime}}\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/bets"
              },
              "response": []
            },
            {
              "name": "Amends - Wins",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "function guid2(){",
                      "   return s4()+s5();",
                      "}",
                      "function guid3(){",
                      "   return s5()+s5();",
                      "}",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "function s5(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "var bets_round3 = pm.environment.get(\"bets_round3\");",
                      "",
                      "var bets_1_win = pm.environment.get(\"bets_1\") * 2;",
                      "pm.environment.set(\"bets_1_win\", bets_1_win);",
                      "",
                      "var bets_2_win = pm.environment.get(\"bets_2\") * 2;",
                      "pm.environment.set(\"bets_2_win\", bets_2_win);",
                      "",
                      "var bets_3_win = pm.environment.get(\"bets_3\") * 2;",
                      "pm.environment.set(\"bets_3_win\", bets_3_win);",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"wins_mtcode1\", \"rel-win-BPUP2019\"+ bets_round1+\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode2\", \"rel-win-BPUP2019\"+ bets_round2 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"wins_mtcode3\", \"rel-win-BPUP2019\"+ bets_round3 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom)",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() + '-' + ",
                      "            pad(this.getMonth() + 1) + '-' + ",
                      "            pad(this.getDate()) + 'T' + ",
                      "            pad(this.getHours()) + ':' + ",
                      "            pad(this.getMinutes()) + ':' + ",
                      "            pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b999243c-ea01-4167-a835-288c353d01e6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var delayTimeStr = pm.environment.get(\"delayTime\");\r",
                      "var delayTime = parseInt(delayTimeStr);\r",
                      "\r",
                      "pm.test(\"Status code is 200 and Response time is less than \"+ delayTimeStr +\"ms\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(delayTime);\r",
                      "});\r",
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.success[0].balance;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var res_currency = jsonData.data.success[0].currency;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "    var maxDigits = parseInt(pm.environment.get(\"MaxDecimalDigits\"));\r",
                      "    pm.expect(d).to.be.equal(maxDigits);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "57bb8912-bffe-47c7-8367-6291a2e2525a"
                  }
                }
              ],
              "_postman_id": "65f615a3-010a-4d40-9847-7f1059af3b81",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode1}}\",\r\n          \"amount\": {{bets_1_win}},\r\n          \"validbet\":{{bets_1_win}},\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode2}}\",\r\n          \"amount\": {{bets_2_win}},\r\n          \"validbet\":{{bets_2_win}},\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{wins_mtcode3}}\",\r\n          \"amount\": {{bets_3_win}},\r\n          \"validbet\":{{bets_3_win}},\r\n          \"roundid\": \"{{bets_round3}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\",\r\n          \"gamehall\": \"cq9\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/wins"
              },
              "response": []
            },
            {
              "name": "Amends -The correct request",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var bets_round1 = pm.environment.get(\"bets_round1\");",
                      "var bets_round2 = pm.environment.get(\"bets_round2\");",
                      "",
                      "postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+ bets_round1 +\":cq9\")",
                      "postman.setEnvironmentVariable(\"amend_mtcode4\", \"rel-amend-BPUP2019\"+ bets_round2 + \":cq9\")",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "96686fdb-6f4e-4816-8bf9-274946065917"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var status_code = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "if (status_code == \"0\")\r",
                      "{\r",
                      "    var balance = jsonData.data.success[0].balance;\r",
                      "    var d = (balance.toString().split(\".\")[1].length);\r",
                      "    var res_currency = jsonData.data.success[0].currency;\r",
                      "    var currency = pm.variables.get(\"currency\");\r",
                      "    console.log(res_currency);\r",
                      "};\r",
                      "\r",
                      "pm.test(\"The status_code must be 0\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of balance should be number\", function () {\r",
                      "    console.log(\"Balance=>\"+balance);\r",
                      "    pm.expect(typeof(balance)).to.include(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"The data type of status_code should be string\", function () {\r",
                      "    pm.expect(status_code).to.eql(\"0\");\r",
                      "});\r",
                      " \r",
                      "pm.test(\"The balance need support at least 4th decimal place\", function () {\r",
                      "     pm.expect(d).to.be.above(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"API returns the currency and agent currency need to be same\", function () {\r",
                      "     pm.expect(res_currency).to.include(currency);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "e2412b45-c0b1-4e5a-a81f-d748c33a67ef"
                  }
                }
              ],
              "_postman_id": "5d9a2e56-b9b9-4c45-890d-b4498a64f063",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "wtoken",
                    "value": "{{wtoken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round1}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - mtcode duplicate error, should return error code 2009",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "269fa828-0139-4f46-b5b2-e7c63dc8c226"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"mtcode duplicate error, should return error code 2009\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"2009\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50f82d46-0cf6-4c07-9fd8-bc2cc4354978"
                  }
                }
              ],
              "_postman_id": "5face911-38d2-473b-97ae-67d8e7bff175",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “account” parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "fe212bbd-1c72-4e86-8af0-4ac3b345b4f3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “account” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "6d4e7d1e-e67d-4588-aaa4-b5eb67bed7ac"
                  }
                }
              ],
              "_postman_id": "fba70237-941d-45f4-a1e6-a04c2375cb02",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “mtcode” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "06e0d12a-5619-4838-a8b4-8d724debc6c6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “mtcode” parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "08aa259f-4d0d-4bd3-95e5-a2ee106cc5ef"
                  }
                }
              ],
              "_postman_id": "6283ccd1-8def-49ec-a957-af97d42ec69f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “amount” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "66ca6021-4226-4826-9818-71906e125da3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “amount” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "087f31a3-8e14-43a4-88e9-4a8099c30e16"
                  }
                }
              ],
              "_postman_id": "420562ad-3c55-4b5a-8b08-7e0c1cc31656",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “validbet” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "cf0cee07-906d-430a-afca-624ec1da7293"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “validbet” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "916d1d4c-8dfe-4249-a0d1-f6cdd79578b7"
                  }
                }
              ],
              "_postman_id": "0520b9d4-a9a1-4ee2-9868-cee4db18e7a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “roundid” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "d0a32712-b278-47c7-ac9d-cb92ed89c967"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “roundid” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "53594b91-59f9-4d2f-8e96-1edf274ec646"
                  }
                }
              ],
              "_postman_id": "6d2df0ae-2b34-439a-b7c9-d35d881f4e8f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “eventtime” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "ddfb15d9-1e0a-416a-8033-82eb65696885"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “eventtime” parameter in event, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "069dce11-0fec-45ee-9f50-a95e5ef7ca48"
                  }
                }
              ],
              "_postman_id": "66c98e57-c1fb-403f-8bbe-c3a9a3feb49e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n         \r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - The \"eventime\" parameter has wrong time foramat in data, should return error code 1004",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "da86a769-29f9-4776-8e49-a9e914d8eff1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The eventime parameter has wrong time foramat in data, should return error code 1004\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1004\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "35b6e4c6-b6df-49f4-a315-5dd01707a472"
                  }
                }
              ],
              "_postman_id": "377a629d-5d9e-4222-962f-c9afbeb4eeb0",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"2020-09-02T02:07:02.126-04\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"2020-09-02T02:07:02.126-04\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No “gamecode” parameter in event, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function guid(){",
                      "   return s4()+s4();",
                      "}",
                      "",
                      "",
                      "function s4(){",
                      "   return Math.floor((1+Math.random())*0x10000)",
                      "   .toString()",
                      "   .substring(1);",
                      "}",
                      "",
                      "var mtcodeRandom=guid();",
                      "",
                      "",
                      "postman.setEnvironmentVariable(\"amend_mtcode3\",\"rel-amend-BPUP2019\"+mtcodeRandom+\":cq9\")",
                      "postman.setEnvironmentVariable(\"amend_mtcode4\",\"rel-amend-BPUP2019\"+mtcodeRandom+\"1:cq9\")",
                      "postman.setEnvironmentVariable(\"ucode\", mtcodeRandom+\"456\")",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "3835a48a-33cf-45f5-a18e-cb86d4b33d65"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No “eventtime” parameter in event, should return error code 1003\", function () {\r",
                      "    console.log(\"GamecodeError:\"+jsonData.data.failed[0].code);\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "eac2e192-6dfc-4c47-b1d7-c8ce28cb18de"
                  }
                }
              ],
              "_postman_id": "1713a1fb-efe8-45b1-9d79-c6a8ae15b0df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\"\r\n          \r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No \"eventtime\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "50ec251c-ebbb-48d1-9861-fd19b5d3ef57"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No eventtime parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a9ac662f-2ad0-4078-adec-18450b90ac89"
                  }
                }
              ],
              "_postman_id": "a1b13b31-acd1-4d5b-89f3-485203b1b3a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No \"ucode\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "9c35f80d-7999-4553-8bb2-b79ba4b0d08e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No ucode parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "0dae6363-a60a-488f-b7ca-36e8ca9f6d1b"
                  }
                }
              ],
              "_postman_id": "1f382bda-f7b3-48de-aeea-8705a0291697",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\"\r\n      \r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No \"amount\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "18a8ac74-463f-4c9b-b830-ff98260e2dfd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No amount parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "04455afc-4ed7-486b-841d-8a633e566816"
                  }
                }
              ],
              "_postman_id": "fb160e71-b1d7-44d3-804b-b00e1b494cd4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - No \"action\" parameter, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1c7559b4-94de-4107-842c-bbd00e69c8d7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"No action parameter, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "c6626980-4e0e-4d38-860a-d9be6afe0abb"
                  }
                }
              ],
              "_postman_id": "e64e86ab-43ec-4fdb-8939-bf80a3226b5c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n     \r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - The “amount” parameter is negative, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "122069c4-da12-49d4-963f-1097a0f7d698"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The “amount” parameter is negative, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "a5e4c4a0-b5d6-4ee6-a52c-2730f6b686e7"
                  }
                }
              ],
              "_postman_id": "e2bdec8d-f11a-4408-a3a0-e2ed8c0782f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": -200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends - The “amount” parameter in event is negative, should return error code 1003",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "",
                      "",
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "1b275999-f2ca-41ce-86ac-14cfed10a3fe"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"The “amount” parameter in event is negative, should return error code 1003\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1003\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "7899b30e-6ffb-47f2-a97e-427b88ff0a90"
                  }
                }
              ],
              "_postman_id": "340457e4-bf9c-4517-869d-99be1ed09bea",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"{{account}}\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": -100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            },
            {
              "name": "Amends -  If the player not found, should return error code 1006",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "",
                      "Date.prototype.toIsoString = function(timezone) {",
                      " var tzo = timezone * 60,",
                      "     dif = tzo >= 0 ? '+' : '-',",
                      "     pad = function(num) {",
                      "         var norm = Math.floor(Math.abs(num));",
                      "         return (norm < 10 ? '0' : '') + norm;",
                      "     };",
                      "     ",
                      "     var timeOffset = (this.getTimezoneOffset() / 60) + timezone",
                      "     this.setHours(this.getHours() + timeOffset)",
                      "     ",
                      "     var dt = this.getFullYear() +",
                      "         '-' + pad(this.getMonth() + 1) +",
                      "        '-' + pad(this.getDate()) +",
                      "     'T' + pad(this.getHours()) +",
                      "     ':' + pad(this.getMinutes()) +",
                      "     ':' + pad(this.getSeconds());",
                      "     ",
                      "     if (timezone == 0) {",
                      "         return dt + 'Z';",
                      "     } else {",
                      " return dt +",
                      "        dif + pad(tzo / 60) +",
                      "     ':' + pad(tzo % 60);",
                      "     }",
                      "}",
                      "",
                      "var timezone = -4;",
                      "var dt = new Date();",
                      "postman.setEnvironmentVariable(\"datetime\", dt.toIsoString(timezone))",
                      "setTimeout(function(){  console.log('延时0.5秒'); }, 1000)",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "76bda081-36e7-4493-9ce9-a02daacbb9bf"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "if (pm.response.code == \"200\") {\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var no_parameter = jsonData.status.code;\r",
                      "    pm.test(\"Response time is less than 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});};\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.expect(pm.response.code).to.eql(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\" If the player not found, should return error code 1006\", function () {\r",
                      "    pm.expect(jsonData.data.failed[0].code).to.eql(\"1006\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "id": "b349b70a-0808-491f-a93c-62d3e6fc7f96"
                  }
                }
              ],
              "_postman_id": "04481948-6af2-41cf-baf9-7f64db23f403",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "wtoken",
                    "type": "text",
                    "value": "{{wtoken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"list\": [\r\n    {\r\n      \"account\": \"fakeplayer\",\r\n      \"event\": [\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode3}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        },\r\n        {\r\n          \"mtcode\": \"{{amend_mtcode4}}\",\r\n          \"amount\": 100,\r\n          \"validbet\":100,\r\n          \"action\": \"credit\",\r\n          \"roundid\": \"{{bets_round2}}\",\r\n          \"eventtime\": \"{{datetime}}\",\r\n          \"gamecode\": \"BPUP2019\"\r\n        }\r\n      ],\r\n      \"eventtime\": \"{{datetime}}\",\r\n      \"amount\": 200,\r\n      \"action\": \"credit\",\r\n      \"ucode\": \"{{ucode}}\"\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{swclient}}/transaction/game/amends"
              },
              "response": []
            }
          ],
          "_postman_id": "1b1dd826-5693-4c57-9efc-d9cb67b4ec06",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "683b73f4-0de4-47be-a05e-6c5ddb3a0c41"
    }
  ],
  "auth": {
    "type": "basic",
    "basic": {
      "password": "T1c0nnrd6936",
      "username": "macan.itwk@gmail.com"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "2b19df0f-a5af-404a-bc0c-0020a72df5f4",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "ed88e1c7-a02a-449e-81bd-fe3d2f5f7070",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "0298ce13-ea00-498f-9140-e22bf0faccb6",
      "key": "delayTime",
      "value": "1000",
      "type": "string"
    }
  ]
}